GET car_information/_search
{
  "query": {
    "match_all": {}
  }
}
GET car_information/_search?pretty=true&size=100000
{
  "query": {
    "constant_score": {
      "filter": {
        "nested": {
          "path": "models",
          "query": {
            "nested": {
              "path": "models.model",
              "query": {
                "nested": {
                  "path": "models.model.generations",
                  "query": {
                    "nested": {
                      "path": "models.model.generations.generation",
                      "query": {
                        "nested": {
                          "path": "models.model.generations.generation.modifications",
                          "query": {
                            "nested": {
                              "path": "models.model.generations.generation.modifications.modification",
                              "query": {
                                "bool": {
                                  "should": [
                                    {
                                      "match": {
                                        "models.model.generations.generation.modifications.modification.generation": "smax"
                                      }
                                    },
                                    {
                                      "match": {
                                        "models.model.generations.generation.modifications.modification.brand": "smax"
                                      }
                                    },
                                    {
                                      "match": {
                                        "models.model.generations.generation.modifications.modification.model": "smax"
                                      }
                                    },
                                    {
                                      "match": {
                                        "models.model.generations.generation.modifications.modification.coupe": "smax"
                                      }
                                    },
                                    {
                                      "match": {
                                        "models.model.generations.generation.modifications.modification.engine": "smax"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "boost": 1.2
    }
  },
  "highlight": {
    "fields": {
      "models.model.generations.generation.modifications.modification.generation": {},
      "models.model.generations.generation.modifications.modification.brand": {},
      "models.model.generations.generation.modifications.modification.model": {},
      "models.model.generations.generation.modifications.modification.coupe": {},
      "models.model.generations.generation.modifications.modification.engine": {}
    }
  }
}
GET car_information/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "models.model.generations.generation.modifications.modification.engine": {
              "query": "C 63",
              "operator": "or",
              "minimum_should_match": "1"
              
            }
          }
        }
      ]
    }
  },
  "highlight": {
    "fields": {
      "models.model.generations.generation.modifications.modification.engine" :{}
    }
  }
}


GET car_search_data/_search
{
  "size": 10000000,
  "query": {
    "bool": {
      "minimum_should_match": 1,
      "should": [
        {
          "regexp": {
            "generation.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "brand.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "model.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "coupe.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "engine.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "match": {
            "productionyears": {
              "query": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*"
            }
          }
        },
        {
          "match": {
            "generationyears": {
              "query": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*"
            }
          }
        },
        {
          "regexp": {
            "generation.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "engine.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "generation.keyword": {
              "value": ".*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "engine.keyword": {
              "value": ".*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        }
      ]
    }
  },
  "sort": [
    {
      "_score": {
        "order": "desc"
      }
    }
  ]
}


GET car_search_data/_search
{
  "size": 10000000,
  "query": {
    "bool": {
      "minimum_should_match": 1,
      "should": [
        {
          "regexp": {
            "generation.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "brand.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "model.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "coupe.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "engine.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "match": {
            "productionyears": {
              "query": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*"
            }
          }
        },
        {
          "match": {
            "generationyears": {
              "query": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x[^a-zA-Z0-9]*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*"
            }
          }
        },
        {
          "regexp": {
            "generation.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "engine.keyword": {
              "value": ".*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "generation.keyword": {
              "value": ".*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        },
        {
          "regexp": {
            "engine.keyword": {
              "value": ".*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
        }
      ],
      "filter": [
        {
          "script": {
            "script": {
              "source": """
                if ( (/.*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*/i.matcher(doc["generation.keyword"].value).matches() && /.*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x.*/i.matcher(doc["engine.keyword"].value).matches()) || (/.*S[^a-zA-Z0-9]*m[^a-zA-Z0-9]*a[^a-zA-Z0-9]*x.*/i.matcher(doc["generation.keyword"].value).matches() && /.*2[^a-zA-Z0-9]*1[^a-zA-Z0-9]*0.*/i.matcher(doc["engine.keyword"].value).matches()) ) {
                  return true
                }
                """,
              "lang": "painless"
            }
          }
        }
      ]
    }
  },
  "sort": [
    {
      "_score": {
        "order": "desc"
      }
    }
  ]
}


GET car_search_data/_search
{
  "size": 10000000,
  "query": {
          "regexp": {
            "combined.keyword": {
              "value": ".*c[^a-zA-Z0-9]*6[^a-zA-Z0-9]*3.*a[^a-zA-Z0-9]*m[^a-zA-Z0-9]*g.*",
              "flags": "ALL",
              "case_insensitive": true,
              "max_determinized_states": 10000,
              "rewrite": "constant_score"
            }
          }
  },
  "sort": [
    {
      "_score": {
        "order": "desc"
      }
    }
  ]
}